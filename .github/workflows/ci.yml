name: sorg CI

on:
  pull_request:
  push:
  schedule:
    # Once every 3 hours.
    - cron: "0 */3 * * *"

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    env:
      # Saw build failures, apparently because awscli is trying to determine
      # region. This is an undocumented env var that disables that check.
      #
      # Discovered from: https://github.com/aws/aws-cli/issues/5262#issuecomment-705832151
      AWS_EC2_METADATA_DISABLED: true

      CLOUDFRONT_ID: E2D97SPIHRBCUA
      CONCURRENCY: 10 # reduced because I think I'm running into Dropbox rate problems
      ENABLE_GOAT_COUNTER: true
      GOOGLE_ANALYTICS_ID: UA-47798518-1

    steps:
      - name: Install Go
        uses: actions/setup-go@v2

      # Used to force dependencies to re-cache once a day so that we don't run
      # into any weird cache invalidation problems, so to make sure that
      # dependency fetches keep working.
      - name: Get date
        id: get-date
        run: |
          echo "::set-output name=date::$(/bin/date -u "+%Y-%m-%d")"
        shell: bash

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          # Don't try to use variables in these paths. They don't seem to work
          # and it'll lead to hours of confusion. You can use a `~`, but I've
          # expanded HOME so that finding things is easier.
          path: |
            /home/runner/go/bin/
            /home/runner/go/pkg/mod/
            /home/runner/imagemagick/
            /opt/mozjpeg/
          key: ${{ runner.os }}-${{ steps.get-date.outputs.date }}-cache-dependencies-v2

      - name: Install Golint
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: go get -u golang.org/x/lint/golint

      # The copy of ImageMagick we could get from apt-get is ancient and
      # doesn't handle niceties like `.heic` files, so here we get the binary
      # release directly. When Ubuntu is upgraded at some point in the
      # probably-distant future, we can probably get rid of this.
      - name: Install ImageMagick
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: |
          mkdir -p $HOME/imagemagick/bin/
          curl -L -o $HOME/imagemagick/bin/magick https://imagemagick.org/archive/binaries/magick
          # curl --compressed -L --output $HOME/imagemagick/bin/magick https://imagemagick-brandur.s3.us-east-1.amazonaws.com/magick
          chmod +x $HOME/imagemagick/bin/magick

      - name: ImageMagick format options
        run: $HOME/imagemagick/bin/magick identify -list format

      # Uses an artifact built by: https://github.com/brandur/mozjpeg-builder
      - name: Install MozJPEG
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: |
          curl --compressed -O https://mozjpeg-brandur.s3.us-east-1.amazonaws.com/mozjpeg_master_amd64.deb
          sudo dpkg -i mozjpeg_master_amd64.deb

      # It'd be nice to take apt-get back out of the flow since it's so slow.
      # Unfortunately, none of the pngquant install options make this
      # particularly easy.
      - name: Install PNGQuant
        run: sudo apt-get install pngquant

      - name: Checkout
        uses: actions/checkout@v3

      - name: Debug
        run: |
          echo "github.ref=${{ github.ref }}"
          echo "go env GOPATH=$(go env GOPATH)"
          echo "pwd=$(pwd)"
          echo "GITHUB_WORKSPACE=${GITHUB_WORKSPACE}"
          echo "HOME=${HOME}"

      - name: Clean
        run: make clean

      - name: "Go: Install"
        run: make install

      - name: Fetch latest qself data/
        run: make data-update

      - name: "Go: Test"
        run: make test
        env:
          # GitHub basically makes it fucking impossible to use any kind of
          # $HOME variable here for reasons that are far beyond me. Eventually
          # just gave up and hard-coded `/home/runner`.
          MAGICK_BIN: /home/runner/imagemagick/bin/magick

          MOZJPEG_BIN: /opt/mozjpeg/bin/cjpeg
          PNGQUANT_BIN: /usr/bin/pngquant

      - name: "Go: Vet"
        run: make vet

      - name: "Check: Dropbox image ?dl=0"
        run: make check-dl0

      - name: "Check: Gofmt"
        run: make check-gofmt

      - name: "Check: Golint"
        # I usually run tasks through make, but for some reasons GitHub Actions
        # really doesn't like the `make lint` task, so I've unfurled it here.
        # The error:
        #
        #     /home/runner/work/_temp/fcd52edc-894a-48eb-bf93-f8b8d5752bce.sh: line 1: unexpected EOF while looking for matching `"'
        #
        run: $(go env GOPATH)/bin/golint -set_exit_status ./...

      - name: "Check: Markdown headers"
        run: make check-headers

      - name: "Check: Retina assets"
        run: make check-retina

      # Download any markers that have not yet been committed to Git to save
      # redoing download/resize work.
      - name: "Download photo markers"
        run: make photographs-download-markers
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWSAccessKeyID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWSSecretAccessKey }}
        if: github.ref == 'refs/heads/master'

      - name: "Build: Development"
        run: make build
        env:
          DRAFTS: true
          MAGICK_BIN: /home/runner/imagemagick/bin/magick
          MOZJPEG_BIN: /opt/mozjpeg/bin/cjpeg
          PNGQUANT_BIN: /usr/bin/pngquant
          TARGET_DIR: ./public-dev

      - name: "Build: Production"
        run: make build
        env:
          MAGICK_BIN: /home/runner/imagemagick/bin/magick
          MOZJPEG_BIN: /opt/mozjpeg/bin/cjpeg
          PNGQUANT_BIN: /usr/bin/pngquant

      - name: "Deploy: Development"
        run: make deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWSAccessKeyID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWSSecretAccessKey }}
          S3_BUCKET: brandur.org-dev
          TARGET_DIR: ./public-dev
        if: github.ref == 'refs/heads/master'

      - name: "Deploy: Production"
        run: make deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWSAccessKeyID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWSSecretAccessKey }}
          S3_BUCKET: brandur.org
          TARGET_DIR: ./public
        if: github.ref == 'refs/heads/master'

      - name: Upload photos
        run: make photographs-upload
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWSAccessKeyID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWSSecretAccessKey }}
        if: github.ref == 'refs/heads/master'

  check-tailwind:
    runs-on: ubuntu-latest
    timeout-minutes: 3

    env:
      TAILWIND_VERSION: v3.1.8

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Tailwind
        run: |
          curl -sLO https://github.com/tailwindlabs/tailwindcss/releases/download/${{ env.TAILWIND_VERSION }}/tailwindcss-linux-x64
          mv tailwindcss-linux-x64 tailwindcss
          chmod +x tailwindcss

      - name: Generate Tailwind
        run: |
          ./tailwindcss -i ./content/stylesheets-modular/tailwind_base.css -o ./content/stylesheets-modular/tailwind.css
          ./tailwindcss -i ./content/stylesheets-modular/tailwind_base.css -o ./content/stylesheets-modular/tailwind.min.css --minify

      - name: Check Git diff
        run: |
          echo "Please make sure that all Tailwind changes are checked in!"
          git diff --exit-code .

  golangci-lint:
    runs-on: ubuntu-latest
    timeout-minutes: 3

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: "Check: golangci-lint"
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.47
