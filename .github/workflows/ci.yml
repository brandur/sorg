name: sorg CI

env:
  # Saw build failures, apparently because awscli is trying to determine
  # region. This is an undocumented env var that disables that check.
  #
  # Discovered from: https://github.com/aws/aws-cli/issues/5262#issuecomment-705832151
  AWS_EC2_METADATA_DISABLED: true

  CONCURRENCY: 10 # reduced because I think I'm running into Dropbox rate problems
  ENABLE_GOAT_COUNTER: true
  GO_VERSION: 1.19
  GOOGLE_ANALYTICS_ID: UA-47798518-1

on:
  pull_request:
  push:
  schedule:
    # Once every 3 hours.
    - cron: "0 */3 * * *"

jobs:
  check_and_test:
    runs-on: ubuntu-latest
    timeout-minutes: 3

    steps:
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          check-latest: true
          go-version: ${{ env.GO_VERSION }}

      # The copy of ImageMagick we could get from apt-get is ancient and
      # doesn't handle niceties like `.heic` files, so here we get a binary
      # directly. When Ubuntu is upgraded at some point in the probably-distant
      # future, we can probably get rid of this.
      #
      # I originally fetched an official release binary, but then ImageMagick
      # switched over to the AppImage format, which didn't work on GitHub
      # Actions at all and didn't seem to have an easy route to success, so I
      # changed over to build by own binary.
      #
      # Uses an artifact built by:
      #
      # https://github.com/brandur/imagemagick-builder
      - name: Install ImageMagick
        run: |
          mkdir -p $HOME/imagemagick/bin/
          curl --compressed -L -o $HOME/imagemagick/bin/magick https://github.com/brandur/imagemagick-builder/releases/download/master/magick
          chmod +x $HOME/imagemagick/bin/magick

      - name: ImageMagick format options
        run: $HOME/imagemagick/bin/magick identify -list format

      # Uses an artifact built by:
      #
      # https://github.com/brandur/mozjpeg-builder
      - name: Install MozJPEG
        run: |
          curl --compressed -L -O https://github.com/brandur/mozjpeg-builder/releases/download/master/mozjpeg_amd64.deb
          sudo dpkg -i mozjpeg_amd64.deb

      # It'd be nice to take apt-get back out of the flow since it's so slow.
      # Unfortunately, none of the pngquant install options make this
      # particularly easy.
      - name: Install PNGQuant
        run: sudo apt-get install pngquant

      - name: Checkout
        uses: actions/checkout@v3

      - name: Debug
        run: |
          echo "github.ref=${{ github.ref }}"
          echo "go env GOPATH=$(go env GOPATH)"
          echo "pwd=$(pwd)"
          echo "GITHUB_WORKSPACE=${GITHUB_WORKSPACE}"
          echo "HOME=${HOME}"

      - name: Clean
        run: make clean

      - name: "Go: Install"
        run: make install

      - name: "Go: Test"
        run: make test
        env:
          # GitHub basically makes it fucking impossible to use any kind of
          # $HOME variable here for reasons that are far beyond me. Eventually
          # just gave up and hard-coded `/home/runner`.
          MAGICK_BIN: /home/runner/imagemagick/bin/magick

          MOZJPEG_BIN: /opt/mozjpeg/bin/cjpeg
          PNGQUANT_BIN: /usr/bin/pngquant

      - name: "Go: Vet"
        run: make vet

      - name: "Check: Dropbox image ?dl=0"
        run: make check-dl0

      - name: "Check: Gofmt"
        run: make check-gofmt

      - name: "Check: Markdown headers"
        run: make check-headers

      - name: "Check: Retina assets"
        run: make check-retina

  check_tailwind:
    runs-on: ubuntu-latest
    timeout-minutes: 3

    env:
      TAILWIND_VERSION: v3.1.8

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Tailwind
        run: |
          curl -sLO https://github.com/tailwindlabs/tailwindcss/releases/download/${{ env.TAILWIND_VERSION }}/tailwindcss-linux-x64
          mv tailwindcss-linux-x64 tailwindcss
          chmod +x tailwindcss

      - name: Generate Tailwind
        run: |
          ./tailwindcss -i ./content/stylesheets-modular/tailwind_base.css -o ./content/stylesheets-modular/tailwind.css
          ./tailwindcss -i ./content/stylesheets-modular/tailwind_base.css -o ./content/stylesheets-modular/tailwind.min.css --minify

      - name: Check Git diff
        run: |
          echo "Please make sure that all Tailwind changes are checked in!"
          git diff --exit-code .

  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    if: github.ref == 'refs/heads/master'

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWSAccessKeyID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWSSecretAccessKey }}
      MAGICK_BIN: /home/runner/imagemagick/bin/magick
      MOZJPEG_BIN: /opt/mozjpeg/bin/cjpeg
      PNGQUANT_BIN: /usr/bin/pngquant

    needs:
      - check_and_test
      - check_tailwind
      - golangci-lint

    steps:
      # See notes in check_and_test.
      - name: Install ImageMagick
        run: |
          mkdir -p $HOME/imagemagick/bin/
          curl --compressed -L -o $HOME/imagemagick/bin/magick https://github.com/brandur/imagemagick-builder/releases/download/master/magick
          chmod +x $HOME/imagemagick/bin/magick

      - name: ImageMagick format options
        run: $HOME/imagemagick/bin/magick identify -list format

      # See notes in check_and_test.
      - name: Install MozJPEG
        run: |
          curl --compressed -L -O https://github.com/brandur/mozjpeg-builder/releases/download/master/mozjpeg_amd64.deb
          sudo dpkg -i mozjpeg_amd64.deb

      # See notes in check_and_test.
      - name: Install PNGQuant
        run: sudo apt-get install pngquant

      - name: Checkout
        uses: actions/checkout@v3

      - name: "Go: Install"
        run: make install

      # Download any markers that have not yet been committed to Git to save
      # redoing download/resize work.
      - name: "Download photo markers"
        run: make photographs-download-markers

      - name: "Download latest qself data/"
        run: make data-update

      - name: "Build: Development"
        run: make build
        env:
          DRAFTS: true
          TARGET_DIR: ./public-dev

      - name: "Build: Production"
        run: make build
        env:
          TARGET_DIR: ./public-dev

      - name: "Deploy: Development"
        run: make deploy
        env:
          S3_BUCKET: brandur.org-dev
          TARGET_DIR: ./public-dev

      - name: "Deploy: Production"
        run: make deploy
        env:
          S3_BUCKET: brandur.org
          TARGET_DIR: ./public

      - name: Upload photos
        run: make photographs-upload
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWSAccessKeyID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWSSecretAccessKey }}

  golangci-lint:
    runs-on: ubuntu-latest
    timeout-minutes: 3

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: "Check: golangci-lint"
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.47
