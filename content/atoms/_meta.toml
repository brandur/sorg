################################################################################
#
# ATOMS
#
# Short multimedia particles in the style of a tweet, but with a maximum length
# closer to a short blog post. New ones are published by editing this TOML file.
#
# Pull a timestamp from a shell with the `datejp` alias, then use Cmd-Y plus the
# "atom" snippet to insert an entry template.
#
################################################################################

[[atoms]]
  published_at = 2023-01-08T10:54:15-07:00
  description = """\
Published [sequence 035](/sequences/035).

This turned out to be a bit of a yakshake as I found out that despite a lot of work adding support to this site for various types of image formats over the years, it still wasn't well set up for `.heic`s that come out of an iPhone. ImageMagick resizes them, but [browser support sits comfortably at 0%](https://caniuse.com/heif) so it's not a format you want to use on the web. I added some code to the build process convert them to WebP (96% support), but that in turn required sizable refactoring to support outputs with an extension different than their input.

I should investigate using WebP as a general target regardless of the input format since it overall seems like a better default that produces better results _by default_ compared to mucking around with JPGs and PNGs. But it's not super pressing because although WebPs will produce considerably better compression than most JPG exports, they're not too much better than a JPG that's been [optimized via MozJPEG](fragments/libjpeg-mozjpeg), which this site does.
"""
  [[atoms.photos]]
    crop_gravity = "south"
    original_image_url = "https://www.dropbox.com/s/sbco4yhozcjibc8/IMG_0286-fixed.jpg?dl=1"
    slug = "downtown-calgary"

[[atoms]]
  published_at = 2023-01-07T10:19:32-07:00
  description = """\
Published [_Content authored by ChatGPT front pages_](/fragments/chatgpt-front-pages), wherein we see empirical proof that an article generated by ChatGPT is good enough to get all the way to the front page of Hacker News before anyone notices.
"""

[[atoms]]
  published_at = 2023-01-06T23:31:17-07:00
  description = """\
A guilty pleasure is reading other peoples' multi-thousand word reviews on Leica cameras. From today: [Fujifilm to Leica](https://arslan.io/2023/01/06/from-fujifilm-to-leica-my-experience-with-the-m11/) which goes into detail in rationalizing buying an M11.

I hate that I love these cameras. At Heroku we had a few vocal Leica users. One went as far as to sell all his equipment to simplify his life on a single Leica rangefinder and lens (an M9). But like the Leica brand itself, the move wasn't about practicality or technical superiority, it was about romance. Leica doesn't sell cameras, it sells lifestyles, and fans do 80% of the work for them. See also [sh*t Leica photographers say](https://www.youtube.com/watch?v=eqaGFVJPJRg).

Years later I'd pick up a Q, an amazing camera. The best that Leica's ever produced. But once you've dipped your toes in, you're forever haunted by the siren call of the M-series.

M cameras are a rip off ($9k for an M11 body + $6k for a lens). _Everybody_ knows they're a rip off. No honest person even tries to argue they're not a rip off. But they're well-designed, and again, supremely romantic.

I check in every so often, and luckily, have held the line. Besides the price tag:

* Rangefinders were always questionable, but EVFs made them obsolete. This might be debatable, except we have proof that Leica knows it too. The camera doesn't come with an EVF, but Leica won't hesitate to sell you one. For $750.

* $15k. Not weather sealed.

* Questionable software. Slow start up time.

On the plus side, the M11 did away with the bottom plate, a feature that'd been left in until the M10 for historical reasons, but completely impractical in every way. You can't beat full frame in a body that size, or the minimalist controls.

Leica must send $100M/yr Fuji's way to keep cameras on APS-C and with at least six unnecessary dials each. It's the only explanation for such magnanimity in staying out of the competition.
"""

[[atoms]]
  published_at = 2023-01-05T10:29:17-07:00
  description = """\
[Marc Andreessen](https://twitter.com/pmarca/status/1605692490404593664):

> The most common event in our times: An expert with power/authority/influence is wrong in full view, yet suffers no consequences.
"""

[[atoms]]
  published_at = 2023-01-04T21:52:22-07:00
  description = """\
Contrary to popular belief, it doesn't rain that much in San Francisco. A few dozen times a year it does. Very occasionally, it rains an unusual amount. Today it rained 0.83", which is kind of a lot, I guess.

Local media and Twitterati (now newly christened armchair meteorologists), not ones to let a kinda-maybe-almost-but-not-really catastrophe go to waste, dramatically dubbed this _**THE BOMB CYCLONE**_. In a flashback to her greatest hits of 2020, London Breed heroically [ordered residents to stay home](https://www.youtube.com/watch?v=qoV_3m7khcE).

By comparison, during an actual adverse weather event like hurricane Ian in Florida last year, the state saw rainfalls [of 10 to 20" over a four-day period](https://www.ncei.noaa.gov/access/monitoring/monthly-report/national/202209/supplemental/page-5), ~3 to 6x daily what SF saw today. Tokyo's rainiest month of October averages 9.24" over ~12 days of rain. In other words, the poor Japanese are dealing with twelve _**THE BOMB CYCLONES**_ just in the month of October, every year.

See also ["our new era is characterised by an unending self-reinforcing cyclone of hyperventilation journalism, the likes of which we’ve never seen before. [...] we will careen from one crisis to the next."](/atoms/gisaqsc)
"""
  [[atoms.photos]]
    original_image_url = "https://www.dropbox.com/s/79n8bavmimoop25/38872442132.jpg?dl=1"
    slug = "shrine-rain-chain"

[[atoms]]
  published_at = 2023-01-04T15:01:16-07:00
  description = """\
Gap [puts their corporate HQ in San Francisco up for lease or sale](https://archive.is/uITHd), notable due to the size of the lease (162k sqft), but also because it's historically one of the city’s preeminent companies, founded, headquartered, and proudly operating out of San Francisco.

Only months ago San Francisco's pundit class decried “misinformation” that Gap had shuttered operations in SF, despite having clearly closed their flagship store on Powell (which remains an iconic SF empty storefront to this day) and corporate office for Old Navy. Gap, they said, is still very much in the city, you stupid conspiracy theorists. But as the facts become indisputable, the strategy shifts from attack to denial -- none of this is happening. Downvote, misdirect, ignore.

Gap's departure is the latest blow in a long series of insults to San Francisco’s bottom line. Office vacancy is at a 30-year high, large real estate holdings are [requesting reassessments to reflect decreased value](/atoms/giooep2), and even other SF darlings continue to flee (Salesforce [announced a 10% layoff round this morning](https://archive.is/oKT73) along with further office space reduction).

The deficit, currently a mere $728M, grows.
"""

[[atoms]]
  published_at = 2023-01-03T23:09:04-07:00
  description = """\
I'm trying to read James Joyce's masterpiece _Ulysses_, again, fast becoming an annual tradition in humiliation and failure. I've tackled my fair share of literature -- Dostoevsky, Dickens, Kafka, Vonnegut, Hemingway -- and for my money, Joyce and _Ulysses_ are on a level of their own, with allusions, puns, and classical references so rich they'll leave you reeling, and wordplay so clever that it's a wonder a human could write it.

But I've never in my life come across a book that's so thoroughly and so totally unreadable. The prose is heavier than a pallet of bricks. A few years ago I tried to cheat my way to success by getting it in audiobook form, only to be foiled by the narrator's dramatic Dubliner accent, which while appropriate, made things even worse. I gave up after less than an hour.

Back to written form, and 10% through. I'll make it, some day.
"""

[[atoms]]
  published_at = 2023-01-03T22:19:59-07:00
  description = """\
English language Stack Exchange [bans ChatGPT-generated answers](https://english.meta.stackexchange.com/questions/15500/announcement-ai-generated-answers-are-officially-banned-here), taking a step beyond what the network as a whole has committed to.

For years the concerns from public intellectuals (few of whom are AI or computer specialists) over <acronym title="General Artificial Intelligence">AGI</acronym> have felt overblown to me, but ChatGPT's got me officially worried. Not that AGI's going to take over the world and enslave us all, but rather that we're about to smash headlong into a creative wall in communication and writing as ChatGPT becomes the perfect remixer, able to endlessly recycle new permutations of the existing bulk of human output in a way that's convincing enough for us to accept. Never able to produce anything interesting or new, but with few people who notice since we spend our days consuming human-regurgitated remixes anyway.

I'm expecting more announcements like Stack Exchange's over the coming months. Discerning humans can _probably_ distinguish ChatGPT output for their chosen field, for now, but it's certain to make problems in everyday life. For example, search engine spammers taking their game to a new level with AI-produced filler far more convincing than the Markhov Chain or plagiarism techniques they use today. Firms using it for frontline support to lead customers in endless rhetorical circles even more frustrating than the precanned answers and telephone mazes of today. Phishing seniors via email with previously unimaginable sophistication.

You can't put this genie back in the bottle. If we don't make it, China will. Regulation's a tempting idea, but lawmakers, barely able to sound even partially articulate in hearings over comparatively simple issues like social media, are wholly unequipped to tackle such a complex subject. The only practical answer is supremely unsatisfying: wait, and see.
"""

[[atoms]]
  published_at = 2023-01-03T10:58:02-07:00
  description = """\
[Bloomberg reports](https://archive.is/HanS3) how Shopify is canceling recurring meetings with more than two people to kick off 2023.

Tobi’s taking a lot of flak over it from middle managers on HN (my favorite from the high drama category: “Tobi has done this a couple times [...] it comes from a place of narcissism”). I think it’s a great idea. In the early 2010s at Heroku I’d started to think that at least as far as tech was concerned, meetings were a solved problem. It was an engineering-driven culture, and most engineers hated them, so we’d schedule as few as possible, with only a few key ones per week. But then I got to Stripe and realized that I’d been living in a bubble -- an uncomfortable truth of the universe is that most people _love_ meetings, even if they think they don't, and doubly so for well-pedigreed Stanford types most likely to work at top Silicon Valley firms. Far from being an element of change, tech was only the latest continuation of a long tradition in big American business. Every satirical pane from 90s Dilbert cartoons held perfectly true.

Based on testimony from Shopify employees, Bloomberg gets a few points wrong:

* Meeting cancellations aren’t permanent. The move wipes the slate clean, but important meetings can be put back on the docket.

* It’s not the first time Shopify’s done it. One person says that these events were originally aimed to occur every `rand(600) + 300` days.

Targeting recurring meetings specifically is the right move. These get slapped onto calendars, often for large groups, and their tendency is to stay after their inertia's built. Before long no one can even remember a time without them, and it’d be heresy to challenge their existence. Ending recurring meetings by default shifts the burden of proof to the right place -- it’s now on middle management to re-justify their existence rather than falling to a maverick engineer who has to burn social capital in a risky attempt to argue for their discontinuation.
"""

[[atoms]]
  published_at = 2023-01-01T23:59:51-07:00
  description = """\
Occasionally, especially when thinking about past around the holiday season, I'll use the Way Back Machine to take a look at sites which I used to consider the absolute pinnacle of great web design back in the day. [Today's specimen](https://web.archive.org/web/20090217010618/http://www.alistapart.com/) is _A List Apart_, a site that writes about web design. Screenshot of a 2009 capture below.

Some things that come to mind:

* We all loved small fonts back then. The body text here is ~8pt Verdana which is a style I used all over the place back in the 2000s. I'd hazard a guess that the reason a lot of us liked them is that larger fonts didn't look anywhere near as good as they do now, before the advent of subpixel anti-aliasing and retina displays.

* A key element that makes the web today look as good as it does are fonts, which render so beautifully nowadays that it makes the web's default look quite good, even where minimal design has been applied. Old sites _should_ benefit from these advancements, but it never seems to translate through. Their fonts don't look great and it makes the whole site not look great.

* The broad strokes of this old layout are excellent, and better than [alistapart.com](https://alistapart.com)'s current site. The specifics are a bit dated and it needs niceties like responsiveness, but a little modernization would easily bring it up to date. The current era of web design is too quick to remove any and every extraneous element, and although the baseline product is decent, 2022's internet looks uniform and somewhat bland.

* Notice all the text in images? (e.g. in the logo, "An event apart", "A book apart", etc.) The reason people did that is that it looked better than what the web browser could render at the time. Programs like Photoshop would yield additional anti-aliasing beyond the browser's discrete, blocky pixels. It's ironic that transported through time, text that was put in images to look better now looks much worse.
"""
  [[atoms.photos]]
    original_image_url = "https://www.dropbox.com/s/8nht7pmv4el677g/a-list-apart.png?dl=1"
    slug = "a-list-apart"

[[atoms]]
  published_at = 2023-01-01T13:00:35-07:00
  description = """\
When all you have is a hammer (access to free Heroku apps), everything looks like a nail (dynamic apps + buildpacks for everything). On the eve of November 28's Herokupocalypse, I pulled the [static rip cord](/fragments/static-rip-cord) and dropped the dynamic component from apps that should've been static HTML pages from the get go. The totality of tooling required: Chrome and a text editor.

See also [_Nanoglyph 022: Time and Entropy_](/nanoglyphs/022-entropy).
"""
  [[atoms.photos]]
    original_image_url = "https://www.dropbox.com/s/mtnly810xmz89kw/L1030975.JPG?dl=1"
    slug = "yunomine-onsen"

[[atoms]]
  published_at = 2023-01-01T12:09:07-07:00
  description = """\
Happy new year!

I always love these first few days of a new year. A fresh slate, after a week off, batteries recharged, and optimism for the year ahead. I've spent the last few days doing little else beyond writing, some casual coding, and running. It's been great. Despite some of the most uncertain times in which I've ever lived, I'm feeling a lot better about 2023 than 2022.
"""

[[atoms]]
  published_at = 2022-12-31T10:20:38-07:00
  description = """\
Wrote [a few notes on publishing iOS live photos](/fragments/ios-live-photos-and-ffmpeg), involving exporting a `.mov` from iOS and running it through ffmpeg to fix aspect ratio, scale, strip audio, and convert to web-friendly codecs. Taking live photos is a nice alternative to shooting in video mode because you can have them captured by default, so there's a lot less mucking around with start/stop.

A major takeaway: you can make a `<video>` behave like a classic animated GIF by having it `autoplay` and `loop`, but only by also including the `muted` option, which browsers require before allowing autoplay to prevent us all from losing our minds.

``` html
<video autoplay loop muted playsinline>
    <source src="/videos/girm632/cougar-1.mp4" type="video/mp4">
    <source src="/videos/girm632/cougar-1.webm" type="video/webm">
</video>
```

`playsinline` is another magic Apple token that tells an iPhone that it's okay to autoplay a video.
"""

[[atoms]]
  published_at = 2022-12-31T10:03:29-07:00
  description = """\
Eugyppius has a way with words:

> The pre-pandemic world is gone forever. If the past year has taught us nothing else, it has taught us that much. Mass containment has permanently transformed our societies and our cultures. It has cemented the cooperative relationship between the regime and the press, and it has changed the content and the tenor of our media. Drama and panic have always sold newspapers, but our new era is characterised by an unending self-reinforcing cyclone of hyperventilation journalism, the likes of which we’ve never seen before. For the foreseeable future, I think, we will careen from one crisis to the next.

Truer words have rarely been spoken. The [whole edition](https://www.eugyppius.com/p/the-year-of-omicron) is well worth reading.
"""

[[atoms]]
  published_at = 2022-12-30T10:38:12-07:00
  description = """\
The Calgary Zoo yesterday, somewhere I haven't been in years. The grounds feel smaller now, but the animals are impressive, and we got lucky with many out in the open. Amongst others:

* Extraordinary penguin exhibit -- lots of them, very active, and multiple locations indoors and out. (I wish I'd gotten some photos, but was holding coffee at the time.)
* Cougars jumping, climbing, and very lively. (The polar opposite of the snow leopards.)
* A gorilla couple with a young baby that attached itself to the mother's arm as she roamed.
* Two Komodo dragons, with one hanging out right in the open a few feet from the glass.
* A pack of wolves circling energetically within inches of the observation perch.
* A troupe of Japanese macaques, which I haven't seen since visiting Japan. (Too bad there wasn't an onsen.)
* An enormous [Malayan tapir](https://en.wikipedia.org/wiki/Malayan_tapir).
* The biggest Bactrian (two hump) camel any of us had ever seen. What a beast.

Although not as cold as last week (-30C), it was chilly out (-3C), and I've never been so thankful to for the butterfly conservatory's hot, humid interior (currently minus the butterflies for the winter season) for recharging body temperature.

I played around with exporting some iOS live photos and running them through ffmpeg to make some VP9/`.webm` shorts. It worked reasonably well, despite the idiosyncrasies of the `<video>` tag.
"""
  [[atoms.videos]]
    url = ["https://www.dropbox.com/s/s8h4b73m2fvx314/wolf-2.mp4?dl=1", "https://www.dropbox.com/s/uptkymissgj9h2t/wolf-2.webm?dl=1"]
  [[atoms.videos]]
    url = ["https://www.dropbox.com/s/6p8mo9jdj61nz6b/cougar-2.mp4?dl=1", "https://www.dropbox.com/s/ks8t5chwa7buc1r/cougar-2.webm?dl=1"]
  [[atoms.videos]]
    url = ["https://www.dropbox.com/s/4lroc5addmx2sax/cougar-1.mp4?dl=1", "https://www.dropbox.com/s/yf0c80zoxxpfrqp/cougar-1.webm?dl=1"]

# webm
# h265/hevc
# webp

# ffmpeg -ss 00:00:00.50 -to 00:00:02.60 -i cougar-1.MOV -filter:v "crop=in_w:in_w*(2/3):0:in_h-(in_w*(2/3)),scale=1200:-1" -an cougar-1.webm
# ffmpeg -ss 00:00:00.50 -to 00:00:02.60 -i cougar-1.MOV -filter:v "crop=in_w:in_w*(2/3):0:in_h-(in_w*(2/3)),scale=1200:-1" -c:v libx265 -tag:v hvc1 -an cougar-1.mp4
# ffmpeg -ss 00:00:00.50 -to 00:00:02.60 -i cougar-1.MOV -filter:v "crop=in_w:in_w*(2/3):0:in_h-(in_w*(2/3)),scale=1200:-1" -loop 0 -an cougar-1.webp

# ffmpeg -ss 00:00:00.00 -to 00:00:02.40 -i cougar-2.MOV -filter:v "crop=in_w:in_w*(2/3):0:in_h-(in_w*(2/3)),scale=1200:-1" -an cougar-2.webm
# ffmpeg -ss 00:00:00.00 -to 00:00:02.40 -i cougar-2.MOV -filter:v "crop=in_w:in_w*(2/3):0:in_h-(in_w*(2/3)),scale=1200:-1" -c:v libx265 -tag:v hvc1 -an cougar-2.mp4
# ffmpeg -ss 00:00:00.00 -to 00:00:02.40 -i cougar-2.MOV -filter:v "crop=in_w:in_w*(2/3):0:in_h-(in_w*(2/3)),scale=1200:-1" -loop 0 -an cougar-2.webp

# ffmpeg -ss 00:00:00.00 -to 00:00:01.90 -i wolf-1.MOV -filter:v "crop=in_w:in_w*(2/3):0:in_h-(in_w*(2/3)),scale=1200:-1" -an wolf-1.webm
# ffmpeg -ss 00:00:00.00 -to 00:00:01.90 -i wolf-1.MOV -filter:v "crop=in_w:in_w*(2/3):0:in_h-(in_w*(2/3)),scale=1200:-1" -c:v libx265 -tag:v hvc1 -an wolf-1.mp4
# ffmpeg -ss 00:00:00.00 -to 00:00:01.90 -i wolf-1.MOV -filter:v "crop=in_w:in_w*(2/3):0:in_h-(in_w*(2/3)),scale=1200:-1" -loop 0 -an wolf-1.webp

# ffmpeg -ss 00:00:00.10 -to 00:00:01.85 -i wolf-2.MOV -filter:v "crop=in_w:in_w*(2/3):0:in_h-(in_w*(2/3)),scale=1200:-1" -an wolf-2.webm
# ffmpeg -ss 00:00:00.10 -to 00:00:01.85 -i wolf-2.MOV -filter:v "crop=in_w:in_w*(2/3):0:in_h-(in_w*(2/3)),scale=1200:-1" -c:v libx265 -tag:v hvc1 -an wolf-2.mp4
# ffmpeg -ss 00:00:00.10 -to 00:00:01.85 -i wolf-2.MOV -filter:v "crop=in_w:in_w*(2/3):0:in_h-(in_w*(2/3)),scale=1200:-1" -loop 0 -an wolf-2.webp

[[atoms]]
  published_at = 2022-12-29T10:46:06-07:00
  description = """\
Follow up from yesterday's note on atom reslugging: [Short, friendly base32 slugs from timestamps](/fragments/base32-slugs), discussing how unique slugs are generated for each atom on this page.

A published timestamp is changed to bytes then encoded to base32 similar to [RFC 4648](https://www.ietf.org/rfc/rfc4648.txt), except with digits leading so that output slugs sort in the same order as the input timestamps. Implemented in ~4 lines of Go:

```  go
var lexicographicBase32 = "234567abcdefghijklmnopqrstuvwxyz"

var lexicographicBase32Encoding = base32.
    NewEncoding(lexicographicBase32).
    WithPadding(base32.NoPadding)

func atomSlug(publishedAt time.Time) string {
    i := big.NewInt(publishedAt.Unix())
    return lexicographicBase32Encoding.EncodeToString(i.Bytes())
}
```
"""

[[atoms]]
  published_at = 2022-12-28T22:54:44-07:00
  description = """\
In the unlikely chance that you happen to be following this in an RSS reader, you just got dump of every atom written so far all over again. Sorry about that. It happened because I "reslugged" (assigned a new URL-friendly identifier) them all, making your reader think each was new content. I normally wouldn't make a breaking change like that, but there was an improvement opportunity I couldn't resist, and the project is only a few days old, so I went for it. It'll be the last time something like that happens.

Each atom's slug is its published timestamp converted to bytes and base32-encoded (e.g. this atom's is `giqmrd2`). I changed the encoding character set from the normal `abcdefghijklmnopqrstuvwxyz234567` to my own numbers-first variant of `234567abcdefghijklmnopqrstuvwxyz`. The _reason_ I did that is so base32-encoded slugs always sort lexicographically the same as their source timestamps, which is quite a convenient property. More on this in a short piece tomorrow.
"""

[[atoms]]
  published_at = 2022-12-28T14:08:13-07:00
  description = """\
I updated my [now](/now) page for the first time in almost three years. It may have been an awful couple years, but at least a great week for this site?
"""

[[atoms]]
  published_at = 2022-12-28T13:30:22-07:00
  description = """\
> Write as often as possible, not with the idea at once of getting into print, but as if you were learning an instrument.

— _J.B. Priestley_

My prose output in 2022 was way down (not counting commit messages and Reddit comments), and I feel this viscerally. The less you do it, the harder it gets, leading to a vicious negative feedback loop. Come 2023, I want to invert that cycle. Write more and more often, and gods willing, make it better, and easier.
"""

[[atoms]]
  published_at = 2022-12-28T10:56:36-07:00
  description = """\
Published fragment: [_Easy, alternative soft deletion: `deleted_record_insert`_](/fragments/deleted-record-insert).

We've switched away from traditional soft deletion using a `deleted_at` column which is wound into every query like `deleted_at IS NULL` to one that uses a schemaless `deleted_record` table that's still useful for debugging, but doesn't need to be threaded in throughout production code, and razes a whole class of bugs involving forgotten `deleted_at IS NULL` predicates or foreign key problems (see [_Soft deletion probably isn't worth it_](/soft-deletion)).

I recommend the use of a generic insertion function:

``` sql
CREATE FUNCTION deleted_record_insert() RETURNS trigger
    LANGUAGE plpgsql
AS $$
    BEGIN
        EXECUTE 'INSERT INTO deleted_record
          (data, object_id, table_name)
        VALUES
          ($1, $2, $3)'
        USING to_jsonb(OLD.*), OLD.id, TG_TABLE_NAME;

        RETURN OLD;
    END;
$$;
```

Which can then be used as an `AFTER DELETE` trigger on any table:

``` sql
CREATE TRIGGER deleted_record_insert AFTER DELETE ON invoice
    FOR EACH ROW EXECUTE FUNCTION deleted_record_insert();
```

Our results have been shockingly good. No bugs to speak of, no reduction in operational visibility, and less friction in writing new code and analytics.
"""

[[atoms]]
  published_at = 2022-12-27T14:31:33-07:00
  description = """\
I wrote some meta-commentary about this Atoms list in a fragment: [_The Unpursuit of clout_](/fragments/unpursuit-of-clout).

The broad thesis is that publishing here is a little harder than publishing on Twitter (it involves a macro to insert an entry in a TOML file and doing a `git push`), but over the last few days which are this project's lifespan to date, I've been finding it easier. With no favs, likes, subtweets, or comments, you're not performing for anybody, and not gaming any metrics. Just write, publish.
"""

[[atoms]]
  published_at = 2022-12-26T23:02:08-07:00
  description = """\
As is traditional, Ruby 3.2 was [released on Christmas day](https://www.ruby-lang.org/en/news/2022/12/25/ruby-3-2-0-released/). The big news is that Shopify's YJIT (Yet Another Ruby JIT) engine is out of experimental status and now considered production ready, having been battle-tested at Shopify for a year.  As [CEO Tobi notes](https://twitter.com/tobi/status/1605663610906152960):

> Very good chance that YJIT is now running more ruby net code than any other VM. Shopify storefronts are a sizeable percentage of all web traffic!

Benchmarks show a performance improvement of ~40% over CRuby, so it's exciting for all Ruby users, including us. I can't imagine not looking into switching to JYIT in the new year.

Alongside Sorbet, Stripe was also working on a JIT, but with YJIT mainline, I think it's safe to say that theirs stays Stripeware (if it's even still being developed). Shopify's demonstrated a healthier model for working with open-source projects -- by maintaining close connection with the core teams (including Rails as well), their work goes upstream, and comes under the umbrella of collective maintenance. Stripe's projects are in danger of ending up more like [Facebook's Hack](https://en.wikipedia.org/wiki/Hack_(programming_language)), diverging far enough from the trunk to become a separate ecosystem.

Also nice to see is that YJIT is written in Rust, after a successful port [in April](https://github.com/ruby/ruby/commit/f90549cd38518231a6a74432fe1168c943a7cc18). This in opposition to Stripe's commitment to a C++ toolchain, and likely to keep the project more maintainable and more sustainable (and hopefully extend these properties to Ruby itself as it makes inroads to core, which is heavy C).
"""

[[atoms]]
  published_at = 2022-12-26T14:49:30-07:00
  description = """\
I wrote a mini-review for [_The Way of Water_](/fragments/way-of-water), the latest in the Avatar franchise. Go for the cutting edge CG of blue aliens and Pandora whales, stay for the 22nd century _Spruce Goose_-esque flying boat, crab mechs, and v2.0 exoskeletons.
"""

[[atoms]]
  published_at = 2022-12-26T11:21:56-07:00
  description = """\
The latest [Twitter files](https://twitter.com/davidzweig/status/1607378386338340867) by way of David Zweig, on the suppression of Covid information (and actually, read this [long form version](https://www.thefp.com/p/how-twitter-rigged-the-covid-debate) instead).

A few days ago [Elon Musk appeared on All-in](https://www.youtube.com/watch?v=HE5CTKqWEV0), and put it best: "all the conspiracy theories about Twitter turned out to be true". It was apparent to anyone paying attention that Twitter was censoring true statements inconvenient to the story being told by Fauci and the White House, despite vehement denial from all parties involved. As with previous iterations, the Twitter files aren't about knowing a murder had taken place, but rather about finding the smoking gun with fingerprints intact.
"""

[[atoms]]
  published_at = 2022-12-26T01:17:19-07:00
  description = """\
A thought-provoking [interview with John Mearsheimer](https://www.youtube.com/watch?v=HBiV1h7Dm5E), a decorated political scientist, and rare dissenting voice on the war in Ukraine. He believes there's an imminent danger of escalation, and makes the case for suing for diplomatic resolution.
"""

[[atoms]]
  published_at = 2022-12-25T23:55:16-07:00
  description = """\
In San Francisco, properties assessed at a total of $59 billion have [requested resassessment in 2022](https://archive.vn/ma4Nk), having correctly recognized that owning downtown isn't as valuable of a proposition as it was in 2020. Adjustment would bring the total down to $26 billion, translating to $308 million in lost property tax revenue should all their reassessments succeed. Add that to the already identified $728 million hole in the budget over the next two years.

Claimed by the article: San Francisco is slow to return to work due to a high concentration of "tech and professional services".

Omitted from the article: after spending a decade spent increasing tax and slathering on red tape, San Francisco locks down earliest in the nation, and for the longest, keeping major restrictions in place until just a few months ago. Add decades worth of obstructionism having contributed to some of the priciest rents and real estate on the planet, in a major surprise young workers didn't find it a compelling place to hunker down for three years of life in stasis, and businesses didn't find it compelling to sit on three years worth of empty offices.

The good news: San Franciscans achieved their final victory in driving out The Bad People. The bad: rents are as high as ever, the budget is a smoking crater in the ground, and the 70s didn't come back.
"""

[[atoms]]
  published_at = 2022-12-25T14:07:58-07:00
  description = """\
The other day I found that my automated job to cross-post to a toy Spring '83 board started failing, with the reason being that my last [sequences](/sequences) entry was more than 22 days ago. Not good -- I'd intended to keep them more up-to-date than that -- but I don't always have anything new to post.

I've always like the idea of `.plan` files, tiny plaintext files that live in a user's home directory and which would be dumped using the `finger` command on a target user. Famously, John Carmack published them for [more than a decade](https://github.com/ESWAT/john-carmack-plan-archive). Here, in a similar spirit to `.plan`, introduce "atoms", tiny multimedia particles that are fast and easy to write. Along with sequence entries, they're cross-posted to Spring '83, and will also live at [`/atoms`](/atoms).
"""

[[atoms]]
  published_at = 2022-12-25T12:31:12-07:00
  description = """\
Xmas morning. A signature gift was a new Zojirushi rice cooker, so I'll graduating from cooking rice in my old steamer (even if you don't recognize the name, their elephant logo is conspicuous worldwide).

Zojirushi reminds me of the old Heroku office at 321 11th St, where we had a number of their vacuum boilers. They'd keep water at perfect coffee-brewing temperature, ready to make a Chemex pourover at any moment.
"""